// Package messages provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package messages

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Message defines model for Message.
type Message struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *uint      `json:"id,omitempty"`
	Text      *string    `json:"text,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MessageRequest defines model for MessageRequest.
type MessageRequest struct {
	Text string `json:"text"`
}

// PatchPatchIdJSONRequestBody defines body for PatchPatchId for application/json ContentType.
type PatchPatchIdJSONRequestBody = MessageRequest

// PostPostJSONRequestBody defines body for PostPost for application/json ContentType.
type PostPostJSONRequestBody = MessageRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a message
	// (DELETE /delete/{id})
	DeleteDeleteId(ctx echo.Context, id int) error
	// Get all messages
	// (GET /get)
	GetGet(ctx echo.Context) error
	// Update an existing message
	// (PATCH /patch/{id})
	PatchPatchId(ctx echo.Context, id int) error
	// Create a new message
	// (POST /post)
	PostPost(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteDeleteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeleteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeleteId(ctx, id)
	return err
}

// GetGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGet(ctx)
	return err
}

// PatchPatchId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchPatchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchPatchId(ctx, id)
	return err
}

// PostPost converts echo context to params.
func (w *ServerInterfaceWrapper) PostPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPost(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/delete/:id", wrapper.DeleteDeleteId)
	router.GET(baseURL+"/get", wrapper.GetGet)
	router.PATCH(baseURL+"/patch/:id", wrapper.PatchPatchId)
	router.POST(baseURL+"/post", wrapper.PostPost)

}

type DeleteDeleteIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteDeleteIdResponseObject interface {
	VisitDeleteDeleteIdResponse(w http.ResponseWriter) error
}

type DeleteDeleteId204Response struct {
}

func (response DeleteDeleteId204Response) VisitDeleteDeleteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDeleteId404Response struct {
}

func (response DeleteDeleteId404Response) VisitDeleteDeleteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetGetRequestObject struct {
}

type GetGetResponseObject interface {
	VisitGetGetResponse(w http.ResponseWriter) error
}

type GetGet200JSONResponse []Message

func (response GetGet200JSONResponse) VisitGetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchPatchIdRequestObject struct {
	Id   int `json:"id"`
	Body *PatchPatchIdJSONRequestBody
}

type PatchPatchIdResponseObject interface {
	VisitPatchPatchIdResponse(w http.ResponseWriter) error
}

type PatchPatchId200JSONResponse Message

func (response PatchPatchId200JSONResponse) VisitPatchPatchIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchPatchId404Response struct {
}

func (response PatchPatchId404Response) VisitPatchPatchIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostPostRequestObject struct {
	Body *PostPostJSONRequestBody
}

type PostPostResponseObject interface {
	VisitPostPostResponse(w http.ResponseWriter) error
}

type PostPost201JSONResponse Message

func (response PostPost201JSONResponse) VisitPostPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a message
	// (DELETE /delete/{id})
	DeleteDeleteId(ctx context.Context, request DeleteDeleteIdRequestObject) (DeleteDeleteIdResponseObject, error)
	// Get all messages
	// (GET /get)
	GetGet(ctx context.Context, request GetGetRequestObject) (GetGetResponseObject, error)
	// Update an existing message
	// (PATCH /patch/{id})
	PatchPatchId(ctx context.Context, request PatchPatchIdRequestObject) (PatchPatchIdResponseObject, error)
	// Create a new message
	// (POST /post)
	PostPost(ctx context.Context, request PostPostRequestObject) (PostPostResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteDeleteId operation middleware
func (sh *strictHandler) DeleteDeleteId(ctx echo.Context, id int) error {
	var request DeleteDeleteIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDeleteId(ctx.Request().Context(), request.(DeleteDeleteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDeleteId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteDeleteIdResponseObject); ok {
		return validResponse.VisitDeleteDeleteIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGet operation middleware
func (sh *strictHandler) GetGet(ctx echo.Context) error {
	var request GetGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGet(ctx.Request().Context(), request.(GetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetGetResponseObject); ok {
		return validResponse.VisitGetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchPatchId operation middleware
func (sh *strictHandler) PatchPatchId(ctx echo.Context, id int) error {
	var request PatchPatchIdRequestObject

	request.Id = id

	var body PatchPatchIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchPatchId(ctx.Request().Context(), request.(PatchPatchIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchPatchId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchPatchIdResponseObject); ok {
		return validResponse.VisitPatchPatchIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostPost operation middleware
func (sh *strictHandler) PostPost(ctx echo.Context) error {
	var request PostPostRequestObject

	var body PostPostJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPost(ctx.Request().Context(), request.(PostPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPostResponseObject); ok {
		return validResponse.VisitPostPostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
