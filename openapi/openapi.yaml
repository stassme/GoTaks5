openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /messages:
    get:
      summary: Get all messages
      tags:
        - messages
      responses:
        '200':
          description: A list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Create a new message
      tags:
        - messages
      requestBody:
        description: The message to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        '201':
          description: The created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /messages/{id}:
    patch:
      summary: Update an existing message
      tags:
        - messages
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the message to update
          schema:
            type: integer
      requestBody:
        description: The message data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        '200':
          description: The updated message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found

    delete:
      summary: Delete a message
      tags:
        - messages
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the message to delete
          schema:
            type: integer
      responses:
        '204':
          description: Message deleted successfully
        '404':
          description: Message not found

  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    patch:
      summary: Update an existing user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: integer
      requestBody:
        description: The user data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete a user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
          format: uint
        text:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    MessageRequest:
      type: object
      properties:
        text:
          type: string
      required:
        - text
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
